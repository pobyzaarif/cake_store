// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	business "github.com/pobyzaarif/cake_store/business"
	cake "github.com/pobyzaarif/cake_store/business/cake"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ic, createCake
func (_m *Repository) Create(ic business.InternalContext, createCake cake.Cake) (cake.Cake, error) {
	ret := _m.Called(ic, createCake)

	var r0 cake.Cake
	if rf, ok := ret.Get(0).(func(business.InternalContext, cake.Cake) cake.Cake); ok {
		r0 = rf(ic, createCake)
	} else {
		r0 = ret.Get(0).(cake.Cake)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(business.InternalContext, cake.Cake) error); ok {
		r1 = rf(ic, createCake)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ic, id
func (_m *Repository) Delete(ic business.InternalContext, id int) error {
	ret := _m.Called(ic, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(business.InternalContext, int) error); ok {
		r0 = rf(ic, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ic
func (_m *Repository) FindAll(ic business.InternalContext) ([]cake.Cake, error) {
	ret := _m.Called(ic)

	var r0 []cake.Cake
	if rf, ok := ret.Get(0).(func(business.InternalContext) []cake.Cake); ok {
		r0 = rf(ic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cake.Cake)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(business.InternalContext) error); ok {
		r1 = rf(ic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ic, id
func (_m *Repository) FindByID(ic business.InternalContext, id int) (cake.Cake, error) {
	ret := _m.Called(ic, id)

	var r0 cake.Cake
	if rf, ok := ret.Get(0).(func(business.InternalContext, int) cake.Cake); ok {
		r0 = rf(ic, id)
	} else {
		r0 = ret.Get(0).(cake.Cake)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(business.InternalContext, int) error); ok {
		r1 = rf(ic, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ic, updateCake
func (_m *Repository) Update(ic business.InternalContext, updateCake cake.Cake) error {
	ret := _m.Called(ic, updateCake)

	var r0 error
	if rf, ok := ret.Get(0).(func(business.InternalContext, cake.Cake) error); ok {
		r0 = rf(ic, updateCake)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
